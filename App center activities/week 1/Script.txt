서버는 client라고 불리는 다른 프로그램에 서비스를 제공해주는 컴퓨터입니다. 노트북도 서버가
될 수 있고, 모든 컴퓨터가 서버가 될 수 있습니다. 하지만 서버는 필연적으로 대규모의 트래픽을 처리해야하기 때문에 고성능인 경우가 많습니다.
A server is reached either via its IP address or Domain Name Servers that match up a name address you type into your browser (like “google.com") to 
the server's real (IP) address.
-----
서버는 가만히 납둬도 알아서 돌아가게 돼있고, 네트워크에서 액세스되기 때문에 IO devices가 필요없습니다. 서버의 설정과 관리는 원격으로 합니다. 
가장 많이 쓰이는 운영체제는 Linux입니다. 이유는 비싼 windows에 비해 무료인데 성능이 좋기때문입니다. 
이걸 client-server model 이라고 하고, 이걸 request-response model로 구현합니다. (과정 설명)
-----
node.js를 쓰는 회사는 이런 회사가 있다고하는데, spring도 같이 쓰는게 대부분이라고 합니다.
node.js의 특징은 : single thread event loop를 도는 event-driven입니다. (event loop 설명)
single thread인 event loop를 돌기 때문에 multi threads인 spring에 비해 코딩이 쉽고 context switching(운영체제 시간에 배우셨죠?)이 없기 때문에 보통 spring보다 훨씬 빠릅니다.
그리고 event-driven이기 때문에 non-blocking IO가 가능합니다.
단점은 : node.js에서는 single thread인 event loop를 도는 시간때문에 복잡한 연산이 오래걸립니다.
javascript기반이기 때문에 frontend도하고 backend도 하는 full stack 개발이 편합니다.
-----
spring을 쓰는 회사는 이런 회사들이 있고 한국에선 법때문에 공공기관 대부분에서 spring을 쓰고있습니다.
spring은 대부분의 경우에 node.js에 비해 성능과 생산성에서 밀리지만, 한 가지 큰 장점이 있는데 : multi threading이 가능하다는 겁니다.
복잡한 연산을 multi threads로 처리할 수 있기 때문에 이 때는 node.js보다 빠릅니다.
-----
Django를 쓰는 회사들입니다.
Django의 특징은 먼저 : 공식 문서의 설명이 아주 친절해서 Django를 쓰는 가장 큰 이유중에 하나라고 합니다.
그리고 python답게 생산성이 아주 좋습니다. 다른 framework에서 일일히 구현해야되는 것들이 코드 몇 줄로 끝납니다.
